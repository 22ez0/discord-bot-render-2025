import { createCommand } from "#base";
import { 
    ApplicationCommandType,
    ApplicationCommandOptionType,
    EmbedBuilder, 
    ActionRowBuilder, 
    ButtonBuilder, 
    ButtonStyle,
    StringSelectMenuBuilder,
    StringSelectMenuOptionBuilder,
    PermissionsBitField 
} from "discord.js";
import { storage } from "../../../lib/storage.js";

// Configura√ß√µes de emojis padr√£o - TODOS os emojis do bot
export const defaultEmojis = {
    // Painel principal
    mod_black: "<:mod_black:1418647219246075964>",
    antinuke: "<:antinuke:1418647215542370415>", 
    clyde: "<:clyde:1418752850711805975>",
    A_Tada: "<a:A_Tada:1418647260002254981>",
    serverowner: "<:serverowner:1418752887768481792>",
    
    // Modera√ß√£o  
    crossss: "<:crossss:1418647224929489102>",
    waving: "<a:waving:1419215651880439889>",
    Y_SgarTime: "<:Y_SgarTime:1419134144092307556>",
    Y_survey: "<:Y_survey:1419134117882232902>",
    downtime: "<a:downtime:1419215634721669130>",
    uptimer: "<a:uptimer:1419215637540110336>",
    cooldown: "<:cooldown:1418752911587938457>",
    alert_white: "<a:alert_white:1419215644435681421>",
    Y_left: "<a:Y_left:1419134147926032558>",
    
    // Automa√ß√£o
    Antinuke: "<:Antinuke:1419248675200172083>",
    reloadlk: "<:reloadlk:1418752934916915370>",
    channels: "<:channels:1418752827462778952>",
    invite: "<a:invite:1419216990601609316>",
    Y_just_a_wave: "<a:Y_just_a_wave:1419134146420146267>",
    gears: "<a:gears:1419216984188387329>",
    
    // Emojis padr√£o do Discord
    dice: "üé≤",
    coin: "ü™ô",
    lightning: "‚ö°", 
    picture: "üñºÔ∏è",
    eight_ball: "üé±",
    computer: "üñ•Ô∏è",
    person: "üë§",
    signal: "üì°",
    envelope: "üì®",
    gear: "‚öôÔ∏è",
    robot: "ü§ñ",
    wave: "üëã",
    masks: "üé≠",
    memo: "üìù",
    target: "üéØ",
    hammer: "üî®",
    boot: "üë¢",
    mute: "üîá",
    broom: "üßπ",
    musical_note: "üéµ",
    tools: "üõ†Ô∏è",
    warning: "‚ö†Ô∏è",
    check_mark: "‚úÖ",
    x_mark: "‚ùå",
    ping_pong: "üèì",
    shield: "üõ°Ô∏è",
    link: "üîó",
    pencil: "‚úèÔ∏è",
    repeat: "üîÑ",
    art: "üé®",
    list: "üìã",
    green_circle: "üü¢",
    yellow_circle: "üü°", 
    red_circle: "üî¥",
    tada: "üéâ",
    thinking: "ü§î",
    eyes: "üëÄ",
    point_right: "üëâ",
    point_left: "üëà",
    arrow_left: "‚óÄ",
    arrow_right: "‚ñ∂"
};

createCommand({
    name: "config-manager",
    description: "üé® Gerenciar todas as configura√ß√µes do bot (textos, emojis e cores)",
    type: ApplicationCommandType.ChatInput,
    options: [
        {
            name: "tipo",
            description: "Tipo de configura√ß√£o a gerenciar",
            type: ApplicationCommandOptionType.String,
            required: true,
            choices: [
                { name: "üé≠ Gerenciar Emojis", value: "emojis" },
                { name: "üìù Editar Textos dos Pain√©is", value: "textos" },
                { name: "üé® Personalizar Cores", value: "cores" },
                { name: "üìã Ver Todas as Configura√ß√µes", value: "view" },
                { name: "üîÑ Resetar Configura√ß√µes", value: "reset" }
            ]
        },
        {
            name: "acao",
            description: "A√ß√£o espec√≠fica para emojis",
            type: ApplicationCommandOptionType.String,
            required: false,
            choices: [
                { name: "üìã Listar Emojis", value: "list" },
                { name: "‚úèÔ∏è Editar Emojis", value: "edit" },
                { name: "üîÑ Resetar Emojis", value: "reset_emojis" }
            ]
        }
    ],
    async run(interaction) {
        // Verificar permiss√µes de administrador
        if (!interaction.memberPermissions?.has(PermissionsBitField.Flags.Administrator)) {
            await interaction.reply({
                content: "‚ùå **Acesso negado!** Voc√™ precisa de permiss√µes de **Administrador** para usar este comando.",
                flags: 64
            });
            return;
        }

        const tipo = interaction.options.getString("tipo", true);
        const acao = interaction.options.getString("acao");

        // Se o tipo √© emoji e h√° uma a√ß√£o espec√≠fica
        if (tipo === "emojis" && acao) {
            switch (acao) {
                case "list":
                    await handleListEmojis(interaction);
                    break;
                case "edit":
                    await handleEditEmojis(interaction);
                    break;
                case "reset_emojis":
                    await handleResetEmojis(interaction);
                    break;
            }
            return;
        }

        // Casos principais
        switch (tipo) {
            case "emojis":
                await handleEmojiMenu(interaction);
                break;
            case "textos":
                await handleEditTexts(interaction);
                break;
            case "cores":
                await handleCustomizeColors(interaction);
                break;
            case "view":
                await handleViewConfig(interaction);
                break;
            case "reset":
                await handleResetAll(interaction);
                break;
        }
    }
});

// Menu principal para emojis (quando n√£o h√° a√ß√£o espec√≠fica)
async function handleEmojiMenu(interaction: any) {
    await interaction.deferReply({ flags: 64 });

    const embed = new EmbedBuilder()
        .setColor("#9c88ff")
        .setTitle("üé≠ **GERENCIAR EMOJIS**")
        .setDescription(
            `> **Escolha uma a√ß√£o para gerenciar os emojis do bot:**\n\n` +
            `üìã **Listar Emojis** - Ver todos os emojis configurados\n` +
            `‚úèÔ∏è **Editar Emojis** - Personalizar emojis por categoria\n` +
            `üîÑ **Resetar Emojis** - Voltar aos emojis padr√£o\n\n` +
            `üí° **Use os bot√µes abaixo para continuar**`
        )
        .setFooter({ text: "Eixo Bot ‚Ä¢ Config Manager ‚Ä¢ Gerenciamento de Emojis" })
        .setTimestamp();

    const row = new ActionRowBuilder<ButtonBuilder>()
        .addComponents(
            new ButtonBuilder()
                .setCustomId("config_emoji_list")
                .setLabel("üìã Listar")
                .setStyle(ButtonStyle.Primary),
            new ButtonBuilder()
                .setCustomId("config_emoji_edit")
                .setLabel("‚úèÔ∏è Editar")
                .setStyle(ButtonStyle.Secondary),
            new ButtonBuilder()
                .setCustomId("config_emoji_reset")
                .setLabel("üîÑ Resetar")
                .setStyle(ButtonStyle.Danger)
        );

    await interaction.editReply({
        embeds: [embed],
        components: [row]
    });
}

// Listar todos os emojis configurados
async function handleListEmojis(interaction: any) {
    await interaction.deferReply({ flags: 64 });
    
    const guildId = interaction.guild!.id;
    const customEmojis = storage.getServerEmojis(guildId);
    const currentEmojis = customEmojis ? { ...defaultEmojis, ...customEmojis } : defaultEmojis;
    
    const embed = new EmbedBuilder()
        .setColor("#5865F2")
        .setTitle("üìã **EMOJIS CONFIGURADOS**")
        .setDescription("Aqui est√£o todos os emojis personalizados configurados:")
        .addFields(
            {
                name: "üéØ **Painel Principal**",
                value: 
                    `**mod_black:** ${currentEmojis.mod_black}\n` +
                    `**antinuke:** ${currentEmojis.antinuke}\n` +
                    `**clyde:** ${currentEmojis.clyde}\n` +
                    `**A_Tada:** ${currentEmojis.A_Tada}\n` +
                    `**serverowner:** ${currentEmojis.serverowner}`,
                inline: true
            },
            {
                name: "üõ°Ô∏è **Modera√ß√£o**",
                value: 
                    `**crossss:** ${currentEmojis.crossss}\n` +
                    `**waving:** ${currentEmojis.waving}\n` +
                    `**Y_SgarTime:** ${currentEmojis.Y_SgarTime}\n` +
                    `**Y_survey:** ${currentEmojis.Y_survey}\n` +
                    `**downtime:** ${currentEmojis.downtime}`,
                inline: true
            },
            {
                name: "ü§ñ **Automa√ß√£o**",
                value: 
                    `**Antinuke:** ${currentEmojis.Antinuke}\n` +
                    `**reloadlk:** ${currentEmojis.reloadlk}\n` +
                    `**channels:** ${currentEmojis.channels}\n` +
                    `**invite:** ${currentEmojis.invite}\n` +
                    `**gears:** ${currentEmojis.gears}`,
                inline: true
            }
        )
        .setFooter({ 
            text: `${interaction.guild!.name} ‚Ä¢ Eixo Bot ‚Ä¢ Emojis Configurados`, 
            iconURL: interaction.client.user?.displayAvatarURL() 
        })
        .setTimestamp();

    await interaction.editReply({ embeds: [embed] });
}

// Editar emojis por categoria
async function handleEditEmojis(interaction: any) {
    await interaction.deferReply({ flags: 64 });

    const embed = new EmbedBuilder()
        .setColor("#ff6b6b")
        .setTitle("‚úèÔ∏è **EDITAR EMOJIS**")
        .setDescription(
            `> **Selecione uma categoria para personalizar:**\n\n` +
            `üéØ **Painel Principal** - Emojis da tela inicial\n` +
            `üõ°Ô∏è **Modera√ß√£o** - Emojis dos comandos de modera√ß√£o\n` +
            `ü§ñ **Automa√ß√£o** - Emojis dos sistemas autom√°ticos\n` +
            `üé≠ **Diversos** - Emojis gerais e utilidades\n\n` +
            `üí° **Escolha uma categoria abaixo**`
        )
        .setFooter({ text: "Eixo Bot ‚Ä¢ Config Manager ‚Ä¢ Edi√ß√£o de Emojis" })
        .setTimestamp();

    const selectMenu = new StringSelectMenuBuilder()
        .setCustomId("config_emoji_category")
        .setPlaceholder("Selecione a categoria para editar")
        .addOptions([
            new StringSelectMenuOptionBuilder()
                .setLabel("üéØ Painel Principal")
                .setDescription("Editar emojis da tela principal")
                .setValue("main"),
            new StringSelectMenuOptionBuilder()
                .setLabel("üõ°Ô∏è Modera√ß√£o")
                .setDescription("Personalizar emojis de modera√ß√£o")
                .setValue("moderation"),
            new StringSelectMenuOptionBuilder()
                .setLabel("ü§ñ Automa√ß√£o")
                .setDescription("Editar emojis dos sistemas autom√°ticos")
                .setValue("automation"),
            new StringSelectMenuOptionBuilder()
                .setLabel("üé≠ Diversos")
                .setDescription("Personalizar emojis gerais")
                .setValue("misc")
        ]);

    const row = new ActionRowBuilder<StringSelectMenuBuilder>()
        .addComponents(selectMenu);

    await interaction.editReply({
        embeds: [embed],
        components: [row]
    });
}

// Resetar emojis para padr√£o
async function handleResetEmojis(interaction: any) {
    await interaction.deferReply({ flags: 64 });

    const guildId = interaction.guild!.id;
    // Resetar emojis removendo configura√ß√µes personalizadas
    const config = storage.getServerConfig(guildId);
    delete config.emojis;
    const success = storage.saveServerConfig(guildId, config);

    if (success) {
        const embed = new EmbedBuilder()
            .setColor("#2ed573")
            .setTitle("üîÑ **EMOJIS RESETADOS**")
            .setDescription(
                `‚úÖ **Todos os emojis foram resetados para o padr√£o!**\n\n` +
                `üéØ Todos os pain√©is agora usam os emojis originais\n` +
                `üíæ Configura√ß√µes salvas automaticamente\n\n` +
                `üí° Use \`/config-manager tipo:emojis acao:edit\` para personalizar novamente`
            )
            .setFooter({ text: "Eixo Bot ‚Ä¢ Config Manager ‚Ä¢ Reset Conclu√≠do" })
            .setTimestamp();

        await interaction.editReply({ embeds: [embed] });
    } else {
        await interaction.editReply({
            content: "‚ùå **Erro!** N√£o foi poss√≠vel resetar os emojis. Tente novamente."
        });
    }
}

// Editar textos dos pain√©is
async function handleEditTexts(interaction: any) {
    await interaction.deferReply({ flags: 64 });

    const embed = new EmbedBuilder()
        .setColor("#9c88ff")
        .setTitle("üìù **EDITAR TEXTOS DOS PAIN√âIS**")
        .setDescription(
            `> **Selecione qual painel voc√™ deseja personalizar:**\n\n` +
            `üéõÔ∏è **Painel Principal** - Texto de boas-vindas e descri√ß√£o\n` +
            `üõ°Ô∏è **Painel Modera√ß√£o** - Textos dos comandos de modera√ß√£o\n` +
            `ü§ñ **Painel Automa√ß√£o** - Descri√ß√µes dos sistemas autom√°ticos\n` +
            `üìã **Painel Logs** - Textos de configura√ß√£o e logs\n` +
            `üé≠ **Painel Divers√£o** - Descri√ß√µes dos comandos de divers√£o\n` +
            `üîß **Painel Utilidades** - Textos das ferramentas √∫teis\n\n` +
            `üí° **Selecione uma op√ß√£o abaixo para continuar**`
        )
        .setFooter({ text: "Eixo Bot ‚Ä¢ Config Manager ‚Ä¢ Personaliza√ß√£o de Textos" })
        .setTimestamp();

    const selectMenu = new StringSelectMenuBuilder()
        .setCustomId("config_text_select")
        .setPlaceholder("Selecione o painel para editar")
        .addOptions([
            new StringSelectMenuOptionBuilder()
                .setLabel("üéõÔ∏è Painel Principal")
                .setDescription("Editar texto de boas-vindas e descri√ß√£o principal")
                .setValue("main_panel"),
            new StringSelectMenuOptionBuilder()
                .setLabel("üõ°Ô∏è Painel Modera√ß√£o")
                .setDescription("Personalizar textos dos comandos de modera√ß√£o")
                .setValue("moderation_panel"),
            new StringSelectMenuOptionBuilder()
                .setLabel("ü§ñ Painel Automa√ß√£o")
                .setDescription("Editar descri√ß√µes dos sistemas autom√°ticos")
                .setValue("automation_panel"),
            new StringSelectMenuOptionBuilder()
                .setLabel("üìã Painel Logs & Config")
                .setDescription("Personalizar textos de configura√ß√£o")
                .setValue("logs_panel"),
            new StringSelectMenuOptionBuilder()
                .setLabel("üé≠ Painel Divers√£o")
                .setDescription("Editar descri√ß√µes dos comandos de divers√£o")
                .setValue("fun_panel"),
            new StringSelectMenuOptionBuilder()
                .setLabel("üîß Painel Utilidades")
                .setDescription("Personalizar textos das ferramentas")
                .setValue("utilities_panel")
        ]);

    const row = new ActionRowBuilder<StringSelectMenuBuilder>()
        .addComponents(selectMenu);

    await interaction.editReply({
        embeds: [embed],
        components: [row]
    });
}

// Personalizar cores
async function handleCustomizeColors(interaction: any) {
    await interaction.deferReply({ flags: 64 });

    const embed = new EmbedBuilder()
        .setColor("#ff6b6b")
        .setTitle("üé® **PERSONALIZAR CORES DOS PAIN√âIS**")
        .setDescription(
            `> **Personalize as cores dos embeds de cada painel:**\n\n` +
            `üéõÔ∏è **Painel Principal:** Cinza Escuro (#2f3136)\n` +
            `üõ°Ô∏è **Modera√ß√£o:** Vermelho (#ff4757)\n` +
            `ü§ñ **Automa√ß√£o:** Verde (#2ed573)\n` +
            `üìã **Logs & Config:** Roxo (#5352ed)\n` +
            `üé≠ **Divers√£o:** Rosa (#ff6b81)\n` +
            `üîß **Utilidades:** Laranja (#ffa502)\n` +
            `üì¢ **Avisos:** Ciano (#00d2d3)\n` +
            `üéµ **Voz:** Azul Discord (#7289da)\n` +
            `üí• **Nuke:** Vermelho Intenso (#ff0000)\n` +
            `üé® **Config Manager:** Roxo Claro (#9c88ff)\n\n` +
            `üîß **Fun√ß√£o em desenvolvimento!**\n` +
            `Em breve voc√™ poder√° personalizar as cores de cada painel individualmente.`
        )
        .setFooter({ text: "Eixo Bot ‚Ä¢ Config Manager ‚Ä¢ Personaliza√ß√£o de Cores" })
        .setTimestamp();

    await interaction.editReply({ embeds: [embed] });
}

// Ver todas as configura√ß√µes
async function handleViewConfig(interaction: any) {
    await interaction.deferReply({ flags: 64 });
    
    const guildId = interaction.guild!.id;
    const customEmojis = storage.getServerEmojis(guildId);
    
    // Pegar configura√ß√µes personalizadas (se existirem)
    const customTexts = {}; // TODO: Implementar sistema de textos personalizados
    const customColors = {}; // TODO: Implementar sistema de cores personalizadas

    const embed = new EmbedBuilder()
        .setColor("#5865f2")
        .setTitle("üìã **CONFIGURA√á√ïES ATUAIS DO BOT**")
        .setDescription(
            `> **Vis√£o geral das personaliza√ß√µes aplicadas:**\n\n` +
            `üé≠ **Emojis Personalizados:** ${customEmojis && Object.keys(customEmojis).length > 0 ? "‚úÖ Configurados" : "‚ùå Usando padr√£o"}\n` +
            `üìù **Textos Personalizados:** ${Object.keys(customTexts).length > 0 ? "‚úÖ Configurados" : "‚ùå Usando padr√£o"}\n` +
            `üé® **Cores Personalizadas:** ${Object.keys(customColors).length > 0 ? "‚úÖ Configuradas" : "‚ùå Usando padr√£o"}\n\n` +
            `**üìä Estat√≠sticas:**\n` +
            `‚Ä¢ **Emojis customizados:** ${customEmojis ? Object.keys(customEmojis).length : 0}\n` +
            `‚Ä¢ **Pain√©is personalizados:** ${Object.keys(customTexts).length}\n` +
            `‚Ä¢ **Cores alteradas:** ${Object.keys(customColors).length}\n\n` +
            `üîß **Para fazer altera√ß√µes:**\n` +
            `‚Ä¢ Use \`/config-manager tipo:emojis\` para emojis\n` +
            `‚Ä¢ Use \`/config-manager tipo:textos\` para textos\n` +
            `‚Ä¢ Use \`/config-manager tipo:cores\` para cores\n` +
            `‚Ä¢ Use \`/config-manager tipo:reset\` para resetar tudo`
        )
        .addFields(
            {
                name: "üéõÔ∏è **Status dos Pain√©is**",
                value: 
                    `üõ°Ô∏è Modera√ß√£o: Padr√£o\n` +
                    `ü§ñ Automa√ß√£o: Padr√£o\n` +
                    `üìã Logs: Padr√£o\n` +
                    `üé≠ Divers√£o: Padr√£o\n` +
                    `üîß Utilidades: Padr√£o`,
                inline: true
            },
            {
                name: "üé® **Cores Aplicadas**",
                value:
                    `Principal: Padr√£o\n` +
                    `Modera√ß√£o: Padr√£o\n` +
                    `Automa√ß√£o: Padr√£o\n` +
                    `Divers√£o: Padr√£o\n` +
                    `Utilidades: Padr√£o`,
                inline: true
            }
        )
        .setFooter({ 
            text: `Servidor: ${interaction.guild!.name} ‚Ä¢ Eixo Bot ‚Ä¢ Config Manager`, 
            iconURL: interaction.client.user?.displayAvatarURL() 
        })
        .setTimestamp();

    await interaction.editReply({ embeds: [embed] });
}

// Resetar todas as configura√ß√µes
async function handleResetAll(interaction: any) {
    await interaction.deferReply({ flags: 64 });

    const embed = new EmbedBuilder()
        .setColor("#ff9f43")
        .setTitle("üîÑ **RESETAR TODAS AS CONFIGURA√á√ïES**")
        .setDescription(
            `‚ö†Ô∏è **ATEN√á√ÉO: Esta a√ß√£o ir√° resetar TODAS as personaliza√ß√µes!**\n\n` +
            `**O que ser√° resetado:**\n` +
            `üé≠ Todos os emojis personalizados\n` +
            `üìù Todos os textos personalizados\n` +
            `üé® Todas as cores personalizadas\n` +
            `‚öôÔ∏è Configura√ß√µes de personaliza√ß√£o\n\n` +
            `**O que N√ÉO ser√° afetado:**\n` +
            `‚úÖ Configura√ß√µes de automa√ß√£o (boas-vindas, auto-role, etc.)\n` +
            `‚úÖ Configura√ß√µes de logs\n` +
            `‚úÖ Configura√ß√µes de modera√ß√£o\n` +
            `‚úÖ Dados dos usu√°rios\n\n` +
            `üîß **Use os bot√µes abaixo para confirmar ou cancelar**`
        )
        .setFooter({ text: "Eixo Bot ‚Ä¢ Config Manager ‚Ä¢ Reset de Configura√ß√µes" })
        .setTimestamp();

    const row = new ActionRowBuilder<ButtonBuilder>()
        .addComponents(
            new ButtonBuilder()
                .setCustomId("config_reset_confirm")
                .setLabel("üîÑ Confirmar Reset")
                .setStyle(ButtonStyle.Danger),
            new ButtonBuilder()
                .setCustomId("config_reset_cancel")
                .setLabel("‚ùå Cancelar")
                .setStyle(ButtonStyle.Secondary)
        );

    await interaction.editReply({ 
        embeds: [embed],
        components: [row]
    });
}

// Fun√ß√£o para obter emojis do servidor (compatibilidade)
export function getServerEmojis(guildId: string) {
    const customEmojis = storage.getServerEmojis(guildId);
    return customEmojis ? { ...defaultEmojis, ...customEmojis } : defaultEmojis;
}

// Fun√ß√£o para atualizar emoji individual (compatibilidade)
export function updateServerEmoji(guildId: string, emojiKey: string, emojiValue: string): boolean {
    const customEmojis = storage.getServerEmojis(guildId) || {};
    customEmojis[emojiKey] = emojiValue;
    return storage.updateServerEmojis(guildId, customEmojis);
}

// defaultEmojis j√° foi exportado acima
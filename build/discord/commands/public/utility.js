import { createCommand } from "#base";
import { ApplicationCommandType, ApplicationCommandOptionType, EmbedBuilder, PermissionsBitField, ChannelType } from "discord.js";
// Comando /ping
createCommand({
    name: "ping",
    description: "Verificar a lat√™ncia do bot",
    type: ApplicationCommandType.ChatInput,
    async run(interaction) {
        const start = Date.now();
        await interaction.reply({
            content: "üèì Calculando ping...",
            ephemeral: true
        });
        const ping = Date.now() - start;
        const websocketPing = interaction.client.ws.ping;
        const embed = new EmbedBuilder()
            .setColor("#2ed573")
            .setTitle("üèì **PING** | Lat√™ncia do Bot")
            .setDescription(`üì° **Lat√™ncia da API:** \`${ping}ms\`\n` +
            `üåê **Lat√™ncia WebSocket:** \`${websocketPing}ms\`\n\n` +
            `**Status:** ${ping < 100 ? "üü¢ √ìtimo" : ping < 200 ? "üü° Bom" : "üî¥ Alto"}`)
            .setTimestamp();
        await interaction.editReply({
            content: "",
            embeds: [embed]
        });
    }
});
// Comando /serverinfo
createCommand({
    name: "serverinfo",
    description: "Informa√ß√µes detalhadas do servidor",
    type: ApplicationCommandType.ChatInput,
    async run(interaction) {
        const guild = interaction.guild;
        if (!guild) {
            await interaction.reply({
                content: "‚ùå Este comando s√≥ pode ser usado em servidores!",
                ephemeral: true
            });
            return;
        }
        await guild.members.fetch().catch(() => null);
        await guild.channels.fetch().catch(() => null);
        const textChannels = guild.channels.cache.filter(channel => channel.type === ChannelType.GuildText).size;
        const voiceChannels = guild.channels.cache.filter(channel => channel.type === ChannelType.GuildVoice).size;
        const categories = guild.channels.cache.filter(channel => channel.type === ChannelType.GuildCategory).size;
        const totalMembers = guild.memberCount;
        const botMembers = guild.members.cache.filter(member => member.user.bot).size;
        const humanMembers = totalMembers - botMembers;
        const verificationLevels = {
            0: "Nenhuma",
            1: "Baixa",
            2: "M√©dia",
            3: "Alta",
            4: "Muito Alta"
        };
        const embed = new EmbedBuilder()
            .setColor("#5865F2")
            .setTitle(`üñ•Ô∏è **${guild.name}**`)
            .setThumbnail(guild.iconURL({ size: 256 }))
            .addFields({
            name: "üìä **Estat√≠sticas**",
            value: `**Membros:** ${totalMembers.toLocaleString()}\n` +
                `**Humanos:** ${humanMembers.toLocaleString()}\n` +
                `**Bots:** ${botMembers.toLocaleString()}\n` +
                `**Cargos:** ${guild.roles.cache.size}\n` +
                `**Emojis:** ${guild.emojis.cache.size}`,
            inline: true
        }, {
            name: "üìù **Canais**",
            value: `**Total:** ${guild.channels.cache.size}\n` +
                `**Texto:** ${textChannels}\n` +
                `**Voz:** ${voiceChannels}\n` +
                `**Categorias:** ${categories}`,
            inline: true
        }, {
            name: "üõ°Ô∏è **Seguran√ßa**",
            value: `**Verifica√ß√£o:** ${verificationLevels[guild.verificationLevel]}\n` +
                `**Criado em:** <t:${Math.floor(guild.createdTimestamp / 1000)}:D>\n` +
                `**ID:** \`${guild.id}\``,
            inline: true
        })
            .setFooter({
            text: `Servidor ‚Ä¢ ${guild.name}`,
            iconURL: guild.iconURL() || undefined
        })
            .setTimestamp();
        if (guild.banner) {
            embed.setImage(guild.bannerURL({ size: 1024 }));
        }
        await interaction.reply({ embeds: [embed] });
    }
});
// Comando /userinfo
createCommand({
    name: "userinfo",
    description: "Informa√ß√µes sobre um usu√°rio",
    type: ApplicationCommandType.ChatInput,
    options: [
        {
            name: "usu√°rio",
            description: "Usu√°rio para ver as informa√ß√µes",
            type: ApplicationCommandOptionType.User,
            required: false
        }
    ],
    async run(interaction) {
        const targetUser = interaction.options.getUser("usu√°rio") || interaction.user;
        const member = interaction.guild?.members.cache.get(targetUser.id);
        const userFlags = targetUser.flags?.toArray() || [];
        const flagEmojis = {
            Staff: "üë®‚Äçüíº",
            Partner: "ü§ù",
            Hypesquad: "üéâ",
            BugHunterLevel1: "üêõ",
            BugHunterLevel2: "üêû",
            HypeSquadOnlineHouse1: "üè†",
            HypeSquadOnlineHouse2: "üè†",
            HypeSquadOnlineHouse3: "üè†",
            PremiumEarlySupporter: "‚≠ê",
            TeamPseudoUser: "üë•",
            VerifiedBot: "‚úÖ",
            VerifiedDeveloper: "üîß"
        };
        const badges = userFlags.map(flag => `${flagEmojis[flag] || "üè∑Ô∏è"} ${flag}`).join("\n") || "Nenhuma";
        const embed = new EmbedBuilder()
            .setColor(member?.displayHexColor || "#5865F2")
            .setTitle(`üë§ **${targetUser.username}**`)
            .setThumbnail(targetUser.displayAvatarURL({ size: 256 }))
            .addFields({
            name: "üìã **Informa√ß√µes Gerais**",
            value: `**Nome:** ${targetUser.username}\n` +
                `**ID:** \`${targetUser.id}\`\n` +
                `**Conta criada:** <t:${Math.floor(targetUser.createdTimestamp / 1000)}:D>\n` +
                `**Bot:** ${targetUser.bot ? "Sim" : "N√£o"}`,
            inline: true
        }, {
            name: "üè∑Ô∏è **Distintivos**",
            value: badges,
            inline: true
        })
            .setTimestamp();
        if (member) {
            const roles = member.roles.cache
                .filter(role => role.id !== interaction.guild?.id)
                .sort((a, b) => b.position - a.position)
                .map(role => role.toString())
                .slice(0, 10);
            embed.addFields({
                name: "üé≠ **Informa√ß√µes do Servidor**",
                value: `**Apelido:** ${member.nickname || "Nenhum"}\n` +
                    `**Entrou em:** <t:${Math.floor((member.joinedTimestamp || 0) / 1000)}:D>\n` +
                    `**Cargo mais alto:** ${member.roles.highest}\n` +
                    `**Cargos (${member.roles.cache.size - 1}):** ${roles.length > 0 ? roles.join(", ") : "Nenhum"}${roles.length === 10 ? "..." : ""}`,
                inline: false
            });
        }
        await interaction.reply({ embeds: [embed] });
    }
});
// Comando /invite
createCommand({
    name: "invite",
    description: "Gerar convite do servidor",
    type: ApplicationCommandType.ChatInput,
    options: [
        {
            name: "canal",
            description: "Canal para o convite (padr√£o: canal atual)",
            type: ApplicationCommandOptionType.Channel,
            channelTypes: [ChannelType.GuildText, ChannelType.GuildVoice],
            required: false
        },
        {
            name: "dura√ß√£o",
            description: "Dura√ß√£o do convite em minutos (0 = permanente)",
            type: ApplicationCommandOptionType.Integer,
            required: false,
            minValue: 0,
            maxValue: 10080 // 7 dias em minutos
        },
        {
            name: "usos",
            description: "N√∫mero m√°ximo de usos (0 = ilimitado)",
            type: ApplicationCommandOptionType.Integer,
            required: false,
            minValue: 0,
            maxValue: 100
        }
    ],
    async run(interaction) {
        if (!interaction.memberPermissions?.has(PermissionsBitField.Flags.CreateInstantInvite)) {
            await interaction.reply({
                content: "‚ùå **Acesso negado!** Voc√™ precisa da permiss√£o **Criar Convite Instant√¢neo** para usar este comando.",
                ephemeral: true
            });
            return;
        }
        const channel = interaction.options.getChannel("canal") || interaction.channel;
        const duration = interaction.options.getInteger("dura√ß√£o") || 0;
        const maxUses = interaction.options.getInteger("usos") || 0;
        if (!channel || !("guild" in channel)) {
            await interaction.reply({
                content: "‚ùå **Erro!** Canal inv√°lido para criar convite.",
                ephemeral: true
            });
            return;
        }
        try {
            if (!("createInvite" in channel)) {
                await interaction.reply({
                    content: "‚ùå **Erro!** Este tipo de canal n√£o suporta convites.",
                    ephemeral: true
                });
                return;
            }
            const invite = await channel.createInvite({
                maxAge: duration * 60, // Converter minutos para segundos
                maxUses: maxUses,
                unique: true,
                reason: `Convite criado por ${interaction.user.tag}`
            });
            const embed = new EmbedBuilder()
                .setColor("#2ed573")
                .setTitle("üì® **CONVITE CRIADO**")
                .setDescription(`**Link:** ${invite.url}\n\n` +
                `**Canal:** ${channel}\n` +
                `**Dura√ß√£o:** ${duration === 0 ? "Permanente" : `${duration} minutos`}\n` +
                `**Usos m√°ximos:** ${maxUses === 0 ? "Ilimitado" : maxUses}\n` +
                `**Criado por:** ${interaction.user}`)
                .setFooter({ text: `C√≥digo: ${invite.code}` })
                .setTimestamp();
            await interaction.reply({ embeds: [embed] });
        }
        catch (error) {
            console.error("Erro ao criar convite:", error);
            await interaction.reply({
                content: "‚ùå **Erro!** N√£o foi poss√≠vel criar o convite. Verifique minhas permiss√µes.",
                ephemeral: true
            });
        }
    }
});
